
#include <stdio.h>
#include "ap_fixed.h"

void case_1(
    ap_int<16> in_data[21],
    ap_int<16> out_data[17]
)
{
#pragma HLS array_partition variable=in_data complete
#pragma HLS array_partition variable=out_data complete

ap_int<15> in1;
in1.range(14, 0) = in_data[0].range(14, 0);
ap_int<9> in2;
in2.range(8, 0) = in_data[1].range(8, 0);
ap_int<13> in3;
in3.range(12, 0) = in_data[2].range(12, 0);
ap_int<12> in4;
in4.range(11, 0) = in_data[3].range(11, 0);
ap_int<13> in5;
in5.range(12, 0) = in_data[4].range(12, 0);
ap_int<3> in6;
in6.range(2, 0) = in_data[5].range(2, 0);
ap_int<16> in7;
in7.range(15, 0) = in_data[6].range(15, 0);
ap_int<6> in8;
in8.range(5, 0) = in_data[7].range(5, 0);
ap_int<7> in9;
in9.range(6, 0) = in_data[8].range(6, 0);
ap_int<11> in10;
in10.range(10, 0) = in_data[9].range(10, 0);
ap_int<6> in11;
in11.range(5, 0) = in_data[10].range(5, 0);
ap_int<12> in12;
in12.range(11, 0) = in_data[11].range(11, 0);
ap_int<12> in13;
in13.range(11, 0) = in_data[12].range(11, 0);
ap_int<15> in14;
in14.range(14, 0) = in_data[13].range(14, 0);
ap_int<7> in15;
in15.range(6, 0) = in_data[14].range(6, 0);
ap_int<5> in16;
in16.range(4, 0) = in_data[15].range(4, 0);
ap_int<3> in17;
in17.range(2, 0) = in_data[16].range(2, 0);
ap_int<16> in18;
in18.range(15, 0) = in_data[17].range(15, 0);
ap_int<10> in19;
in19.range(9, 0) = in_data[18].range(9, 0);
ap_int<4> in20;
in20.range(3, 0) = in_data[19].range(3, 0);
ap_int<12> in21;
in21.range(11, 0) = in_data[20].range(11, 0);

ap_int<10> m22;
ap_int<11> m23;
ap_int<6> m24;
ap_int<9> m25;
ap_int<9> m26;
ap_int<5> m27;
ap_int<6> m28;
ap_int<7> m29;
ap_int<7> m30;
ap_int<8> m31;
ap_int<13> m32;
ap_int<10> m33;
ap_int<7> m34;
ap_int<15> m35;
ap_int<3> m36;
ap_int<9> m37;
ap_int<6> m38;
ap_int<10> m39;
ap_int<3> m40;
ap_int<6> m41;
ap_int<14> m42;
ap_int<4> m43;
ap_int<11> m44;
ap_int<3> m45;
ap_int<3> m46;
ap_int<6> m47;
ap_int<4> m48;
ap_int<3> m49;
ap_int<10> m50;
ap_int<12> m51;
ap_int<4> m52;
ap_int<3> m53;
ap_int<13> m54;
ap_int<14> m55;
ap_int<6> m56;
ap_int<5> m57;
ap_int<14> m58;
ap_int<14> m59;
ap_int<15> m60;
ap_int<7> m61;
ap_int<5> m62;
ap_int<14> m63;
ap_int<4> m64;
ap_int<13> m65;
ap_int<15> m66;
ap_int<10> m67;
ap_int<7> m68;
ap_int<4> m69;
ap_int<12> m70;
ap_int<14> m71;
ap_int<15> m72;
ap_int<8> m73;
ap_int<7> m74;
ap_int<14> m75;
ap_int<10> m76;
ap_int<13> m77;
ap_int<7> m78;
ap_int<5> m79;
ap_int<7> m80;
ap_int<8> m81;
ap_int<16> m82;
ap_int<15> m83;
ap_int<16> m84;
ap_int<9> m85;
ap_int<9> m86;
ap_int<11> m87;
ap_int<13> m88;
ap_int<6> m89;
ap_int<11> m90;
ap_int<9> m91;
ap_int<8> m92;
ap_int<6> m93;
ap_int<9> m94;
ap_int<8> m95;
ap_int<5> m96;
ap_int<6> m97;
ap_int<10> m98;
ap_int<6> m99;
ap_int<8> m100;
ap_int<13> m101;
ap_int<12> m102;
ap_int<14> m103;
ap_int<6> m104;
ap_int<13> m105;
ap_int<15> m106;
ap_int<13> m107;
ap_int<5> m108;
ap_int<5> m109;
ap_int<6> m110;
ap_int<10> m111;
ap_int<13> m112;
ap_int<16> m113;
ap_int<8> m114;
ap_int<14> m115;
ap_int<11> m116;
ap_int<6> m117;
ap_int<10> m118;
ap_int<3> m119;
ap_int<7> m120;
ap_int<10> m121;
ap_int<11> m122;
ap_int<12> m123;
ap_int<15> m124;
ap_int<11> m125;
ap_int<10> m126;
ap_int<8> m127;

m22 = in1 * in10;
m23 = in3 * in5;
m24 = m23 * in4;
m25 = in14 * in13;
m26 = in12 * in8;
m27 = m26 * in6;
m28 = m23 + in13;
m29 = in12 + in8;
m30 = m25 * in21;
m31 = in13 * m30;
m32 = in14 + in16;
m33 = m29 * in15;
m34 = m25 + m30;
m35 = m23 * m32;
m36 = m29 * in20;
m37 = m28 * in18;
m38 = m37 * in21;
m39 = m31 * m37;
m40 = m31 + in20;
m41 = m28 * m36;
m42 = m38 * m37;
m43 = m40 + m24;
m44 = m33 + m23;
m45 = m40 * m36;
m46 = m40 * m30;
m47 = m38 * m32;
m48 = m27 + m40;
m49 = m28 + m41;
m50 = m35 + m49;
m51 = m31 * m30;
m52 = m43 * m33;
m53 = m48 * m37;
m54 = m51 * m43;
m55 = m50 + m39;
m56 = m41 * m50;
m57 = m49 + m49;
m58 = m51 * m49;
m59 = m55 * m46;
m60 = m51 * m49;
m61 = m51 * m41;
m62 = m58 + m52;
m63 = m44 * m46;
m64 = m56 + m56;
m65 = m54 * m46;
m66 = m55 + m58;
m67 = m50 * m56;
m68 = m59 + m53;
m69 = m61 + m67;
m70 = m50 * m57;
m71 = m60 + m51;
m72 = m61 * m63;
m73 = m57 * m67;
m74 = m67 * m72;
m75 = m72 * m73;
m76 = m64 * m65;
m77 = m68 * m56;
m78 = m61 + m77;
m79 = m74 * m65;
m80 = m77 * m59;
m81 = m71 + m64;
m82 = m67 * m61;
m83 = m71 * m77;
m84 = m65 * m67;
m85 = m70 * m72;
m86 = m69 * m73;
m87 = m80 + m70;
m88 = m78 * m84;
m89 = m88 * m77;
m90 = m69 * m71;
m91 = m78 * m73;
m92 = m76 * m71;
m93 = m77 * m79;
m94 = m93 * m86;
m95 = m87 * m89;
m96 = m83 + m80;
m97 = m83 + m96;
m98 = m78 * m85;
m99 = m92 * m79;
m100 = m98 * m84;
m101 = m96 * m90;
m102 = m94 * m100;
m103 = m101 * m84;
m104 = m91 * m89;
m105 = m89 * m91;
m106 = m93 * m94;
m107 = m98 * m88;
m108 = m93 * m107;
m109 = m99 + m96;
m110 = m92 * m108;
m111 = m106 + m92;
m112 = m110 * m107;
m113 = m111 * m92;
m114 = m98 + m103;
m115 = m111 * m103;
m116 = m104 * m115;
m117 = m113 + m116;
m118 = m104 * m117;
m119 = m109 * m118;
m120 = m112 + m106;
m121 = m112 * m113;
m122 = m114 * m120;
m123 = m108 * m120;
m124 = m111 * m105;
m125 = m107 + m121;
m126 = m123 * m114;
m127 = m124 * m126;

out_data[0] = m22;
out_data[1] = m34;
out_data[2] = m42;
out_data[3] = m45;
out_data[4] = m47;
out_data[5] = m62;
out_data[6] = m66;
out_data[7] = m75;
out_data[8] = m81;
out_data[9] = m82;
out_data[10] = m95;
out_data[11] = m97;
out_data[12] = m102;
out_data[13] = m119;
out_data[14] = m122;
out_data[15] = m125;
out_data[16] = m127;

}
